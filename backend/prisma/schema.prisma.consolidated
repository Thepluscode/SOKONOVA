// Consolidated Prisma Schema - Merge of Auth + Marketplace
// This replaces both /prisma/schema.prisma and /backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?

  // NextAuth fields (from root /prisma/schema.prisma)
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Seller storefront fields
  sellerHandle   String?  @unique     // "mama-ade-fashion"
  shopName       String?
  shopLogoUrl    String?
  shopBannerUrl  String?
  shopBio        String?  // short pitch
  country        String?
  city           String?

  // Basic reputation / trust signal
  ratingAvg      Float?   @default(0)
  ratingCount    Int?     @default(0)

  // Marketplace relations
  carts             Cart[]
  orders            Order[]
  products          Product[] @relation("SellerProducts")
  sellerApplication SellerApplication?
  disputes          Dispute[]
  reviewsGiven      Review[] @relation("BuyerReviews")
  reviewsReceived   Review[] @relation("SellerReviews")

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

// ============================================
// NextAuth Models (from root /prisma/schema.prisma)
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// Marketplace Models (from backend/prisma/schema.prisma)
// ============================================

model Product {
  id          String   @id @default(cuid())
  seller      User     @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId    String
  title       String
  description String
  price       Decimal  @db.Decimal(12,2)
  currency    String   @default("USD")
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Discovery
  category    String?  // e.g. "fashion", "beauty", "home", "electronics"

  cartItems   CartItem[]
  orderItems  OrderItem[]
  inventory   Inventory?

  @@index([sellerId])
  @@index([category])
}

model Inventory {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @unique
  quantity   Int
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  anonKey   String?    @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([anonKey])
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  qty       Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  total       Decimal     @db.Decimal(12,2)
  currency    String      @default("USD")
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  paymentRef  String?
  shippingAdr String?
  payment     Payment?

  // Additional buyer info for fulfillment
  buyerName   String?
  buyerPhone  String?
  buyerEmail  String?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  qty       Int
  price     Decimal  @db.Decimal(12,2)

  // --- SELLER EARNINGS & PAYOUT TRACKING ---
  sellerId        String        // denormalized from product.sellerId at purchase time
  grossAmount     Decimal       @db.Decimal(12,2) // price * qty (snapshot at order time)
  feeAmount       Decimal       @db.Decimal(12,2) // SokoNova marketplace commission
  netAmount       Decimal       @db.Decimal(12,2) // grossAmount - feeAmount (what seller receives)
  payoutStatus    PayoutStatus  @default(PENDING)
  payoutBatchId   String?       // group payouts into batches for reconciliation
  paidAt          DateTime?     // timestamp when seller was paid
  currency        String        @default("USD")

  // --- FULFILLMENT & SHIPPING TRACKING ---
  fulfillmentStatus FulfillmentStatus @default(PACKED)
  shippedAt         DateTime?
  deliveredAt       DateTime?
  trackingCode      String?       // tracking number from carrier
  carrier           String?       // DHL, FedEx, UPS, local courier
  deliveryProofUrl  String?       // photo of package, signature, receipt
  notes             String?       // seller note to buyer (e.g. "left with receptionist")

  // --- DISPUTES & REVIEWS ---
  disputes          Dispute[]
  reviews           Review[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([orderId])
  @@index([sellerId, createdAt])  // For analytics queries
  @@index([payoutStatus])
  @@index([fulfillmentStatus])
}

model Payment {
  id          String        @id @default(cuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String        @unique
  provider    String        // "flutterwave" | "paystack" | "stripe"
  externalRef String?       // PSP transaction / checkout ref
  amount      Decimal       @db.Decimal(12,2)
  currency    String
  status      PaymentStatus @default(INITIATED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  SUCCEEDED
  FAILED
}

enum PayoutStatus {
  PENDING
  PAID_OUT
}

enum FulfillmentStatus {
  PACKED      // Seller prepared item, ready to ship
  SHIPPED     // Handed off to carrier with tracking
  DELIVERED   // Buyer received / confirmed delivery
  ISSUE       // Dispute, lost, damaged, or other problem
}

model SellerApplication {
  id             String            @id @default(cuid())
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @unique

  businessName   String
  phone          String
  country        String
  city           String
  storefrontDesc String            // what they sell / category focus
  status         ApplicationStatus @default(PENDING)

  adminNote      String?
  reviewedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([status])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Dispute {
  id              String         @id @default(cuid())
  orderItem       OrderItem      @relation(fields: [orderItemId], references: [id])
  orderItemId     String
  buyer           User           @relation(fields: [buyerId], references: [id])
  buyerId         String

  reasonCode      DisputeReason  // e.g. DAMAGED / NOT_DELIVERED / COUNTERFEIT / OTHER
  description     String         // buyer's description
  photoProofUrl   String?        // optional photo/video link from buyer

  status          DisputeStatus  @default(OPEN)
  resolutionNote  String?
  resolvedById    String?        // admin or seller who closed it
  resolvedAt      DateTime?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([buyerId])
  @@index([orderItemId])
  @@index([status])
}

enum DisputeReason {
  NOT_DELIVERED
  DAMAGED
  COUNTERFEIT
  WRONG_ITEM
  OTHER
}

enum DisputeStatus {
  OPEN
  SELLER_RESPONDED
  RESOLVED_BUYER_COMPENSATED
  RESOLVED_REDELIVERED
  REJECTED
}

model Review {
  id            String      @id @default(cuid())
  orderItem     OrderItem   @relation(fields: [orderItemId], references: [id])
  orderItemId   String

  seller        User        @relation("SellerReviews", fields: [sellerId], references: [id])
  sellerId      String

  buyer         User        @relation("BuyerReviews", fields: [buyerId], references: [id])
  buyerId       String

  rating        Int         // 1-5
  comment       String
  isVisible     Boolean     @default(true)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([sellerId, isVisible, createdAt])  // For analytics rating trend
  @@index([orderItemId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Seller storefront fields
  sellerHandle  String? @unique // "mama-ade-fashion"
  shopName      String?
  shopLogoUrl   String?
  shopBannerUrl String?
  shopBio       String? // short pitch
  country       String?
  city          String?

  // basic reputation / trust signal
  ratingAvg   Float? @default(0)
  ratingCount Int?   @default(0)

  // Notification preferences
  phone            String?
  timezone         String? @default("Africa/Lagos")
  notifyEmail      Boolean @default(true)
  notifySms        Boolean @default(false)
  notifyPush       Boolean @default(true)
  digestWeekly     Boolean @default(true)
  quietHoursStart  Int? // 0-23 local hour
  quietHoursEnd    Int? // 0-23 local hour
  pushSubscription Json? // Web Push subscription object

  carts             Cart[]
  orders            Order[]
  products          Product[]          @relation("SellerProducts")
  sellerApplication SellerApplication?
  disputes          Dispute[]
  reviewsGiven      Review[]           @relation("BuyerReviews")
  reviewsReceived   Review[]           @relation("SellerReviews")
  notifications     Notification[]
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model Product {
  id          String   @id @default(cuid())
  seller      User     @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId    String
  title       String
  description String
  price       Decimal  @db.Decimal(12, 2)
  currency    String   @default("USD")
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Discovery
  category String? // e.g. "fashion", "beauty", "home", "electronics"

  cartItems  CartItem[]
  orderItems OrderItem[]
  inventory  Inventory?
}

model Inventory {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique
  quantity  Int
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  anonKey   String?    @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  qty       Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD")
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  paymentRef  String?
  shippingAdr String?
  payment     Payment?
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  qty       Int
  price     Decimal @db.Decimal(12, 2)

  // --- SELLER EARNINGS & PAYOUT TRACKING ---
  sellerId      String // denormalized from product.sellerId at purchase time
  grossAmount   Decimal      @db.Decimal(12, 2) // price * qty (snapshot at order time)
  feeAmount     Decimal      @db.Decimal(12, 2) // SokoNova marketplace commission
  netAmount     Decimal      @db.Decimal(12, 2) // grossAmount - feeAmount (what seller receives)
  payoutStatus  PayoutStatus @default(PENDING)
  payoutBatchId String? // group payouts into batches for reconciliation
  paidAt        DateTime? // timestamp when seller was paid
  currency      String       @default("USD")

  // --- FULFILLMENT & SHIPPING TRACKING ---
  fulfillmentStatus FulfillmentStatus @default(PACKED)
  shippedAt         DateTime?
  deliveredAt       DateTime?
  trackingCode      String? // tracking number from carrier
  carrier           String? // DHL, FedEx, UPS, local courier
  deliveryProofUrl  String? // photo of package, signature, receipt
  notes             String? // seller note to buyer (e.g. "left with receptionist")

  // --- DISPUTES ---
  disputes Dispute[]

  // --- REVIEWS ---
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          String        @id @default(cuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String        @unique
  provider    String // "flutterwave" | "paystack" | "stripe"
  externalRef String? // PSP transaction / checkout ref
  amount      Decimal       @db.Decimal(12, 2)
  currency    String
  status      PaymentStatus @default(INITIATED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  SUCCEEDED
  FAILED
}

enum PayoutStatus {
  PENDING
  PAID_OUT
}

enum FulfillmentStatus {
  PACKED // Seller prepared item, ready to ship
  SHIPPED // Handed off to carrier with tracking
  DELIVERED // Buyer received / confirmed delivery
  ISSUE // Dispute, lost, damaged, or other problem
}

model SellerApplication {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  businessName   String
  phone          String
  country        String
  city           String
  storefrontDesc String // what they sell / category focus
  status         ApplicationStatus @default(PENDING)

  adminNote  String?
  reviewedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Dispute {
  id          String    @id @default(cuid())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  buyer       User      @relation(fields: [buyerId], references: [id])
  buyerId     String

  reasonCode    DisputeReason // e.g. DAMAGED / NOT_DELIVERED / COUNTERFEIT / OTHER
  description   String // buyer's description
  photoProofUrl String? // optional photo/video link from buyer

  status         DisputeStatus @default(OPEN)
  resolutionNote String?
  resolvedById   String? // admin or seller who closed it
  resolvedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DisputeReason {
  NOT_DELIVERED
  DAMAGED
  COUNTERFEIT
  WRONG_ITEM
  OTHER
}

enum DisputeStatus {
  OPEN
  SELLER_RESPONDED
  RESOLVED_BUYER_COMPENSATED
  RESOLVED_REDELIVERED
  REJECTED
}

model Review {
  id          String    @id @default(cuid())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String

  seller   User   @relation("SellerReviews", fields: [sellerId], references: [id])
  sellerId String

  buyer   User   @relation("BuyerReviews", fields: [buyerId], references: [id])
  buyerId String

  rating    Int // 1-5
  comment   String
  isVisible Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  type  String // ORDER_PAID, ORDER_SHIPPED, ORDER_DELIVERED, DISPUTE_OPENED, DISPUTE_RESOLVED, PAYOUT_RELEASED, RISK_ALERT
  title String
  body  String
  data  Json? // Additional context (orderId, disputeId, etc.)

  readAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

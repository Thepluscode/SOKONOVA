version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sokonova-postgres
    environment:
      POSTGRES_USER: sokonova
      POSTGRES_PASSWORD: sokonova_dev
      POSTGRES_DB: sokonova
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U sokonova']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sokonova-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sokonova-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://sokonova:sokonova_dev@postgres:5432/sokonova
      REDIS_URL: redis://redis:6379
      PORT: 4000
      NODE_ENV: development
      FRONTEND_BASE_URL: http://localhost:3000
    ports:
      - '4000:4000'
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    command: npm run start:dev

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sokonova-frontend
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_BACKEND_URL: http://localhost:4000
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
